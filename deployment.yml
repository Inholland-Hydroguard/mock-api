apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: golf-dev
  name: '${APP_NAME}'
  annotations: {
     image.openshift.io/triggers: '
     [{
       "from": {
         "kind": "ImageStreamTag",
         "name": "${IMAGE}",
         "namespace": "golf-dev"
       },
       "fieldPath": "spec.template.spec.containers[?(@.name==\"web\")].image",,
       "paused": "false"
     }]'
  }
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        app.kubernetes.io/component: ${APP_NAME}
        app.kubernetes.io/instance: ${APP_NAME}
        app.kubernetes.io/name: ${APP_NAME}
        app.kubernetes.io/part-of: ${APP_NAME}-app
        app.openshift.io/runtime-version: latest
    spec:
      containers:
        - name: ${APP_NAME}
          image: >-
            ${IMAGE}
          ports:
            - containerPort: 8080
              protocol: TCP
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
  paused: false
  revisionHistoryLimit: 2
  progressDeadlineSeconds: 600
  minReadySeconds: 0

---

apiVersion: v1
kind: Service
metadata:
  name: ${APP_NAME}
  namespace: golf-dev
  labels:
      app: ${APP_NAME}
      app.kubernetes.io/component: ${APP_NAME}
      app.kubernetes.io/instance: ${APP_NAME}
      app.kubernetes.io/name: ${APP_NAME}
      app.kubernetes.io/part-of: ${APP_NAME}-app
      app.openshift.io/runtime-version: latest
spec:
  selector:
    app: ${APP_NAME}
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 8080


---

apiVersion: route.openshift.io/v1
kind: Route
metadata:
  name: ${APP_NAME}
  namespace: golf-dev
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/component: ${APP_NAME}
    app.kubernetes.io/instance: ${APP_NAME}
    app.kubernetes.io/name: ${APP_NAME}
    app.kubernetes.io/part-of: ${APP_NAME}-app
    app.openshift.io/runtime-version: latest
spec:
  to:
    name: ${APP_NAME}
    kind: Service
  tls:
    termination: edge
    insecureEdgeTerminationPolicy: Redirect
  wildcardPolicy: None
  port: {
    targetPort: 8080
  }
  alternateBackends: []



