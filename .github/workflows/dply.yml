name: Openshift Mock api CI/CD
# https://github.com/redhat-actions/starter-workflows/blob/main/deployments/openshift.yml

permissions:
  contents: read
  packages: write
  id-token: write

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "golf-dev"
  OPENSHIFT_IMAGE_TAGS: ""
  OPENSHIFT_APP_PORT: ""

  IMAGE_PATH: docker.io/${{ secrets.DOCKERHUB_USERNAME }}/hydroguard-mock-api:latest
  APP_NAME: mock-api
  APP_PORT: 8080
  IMAGE_STREAM: ${{ secrets.OPENSHIFT_NAMESPACE }}/mock-api-${{ github.run_id }}

  IMAGE: ""

  IMAGE_REGISTRY: docker.io
  IMAGE_REGISTRY_USER: ${{ secrets.DOCKERHUB_USERNAME }}
  IMAGE_REGISTRY_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}

  REPO_OWNER:

on:
  push:
    branches: ["test-ghcr"]

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repository
    - name: Checkout code
      uses: actions/checkout@v3

    # Log in to GitHub Container Registry
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}           

    - name: set env vars
      run: |
        echo "REPO_OWNER=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

    # Build the Docker image
    - name: Build Docker image
      run: |
        docker build -t ghcr.io/${{ env.REPO_OWNER }}/${{ github.event.repository.name }}:latest .

    # Push the Docker image to GitHub Container Registry
    - name: Push Docker image
      run: |
        docker push ghcr.io/${{ env.REPO_OWNER }}/${{ github.event.repository.name }}:latest
    
    # Log in to OpenShift
    - name: Log in to OpenShift
      run: |
        oc login ${{ env.OPENSHIFT_SERVER }} --token=${{ secrets.OPENSHIFT_TOKEN }} --insecure-skip-tls-verify
      env:
        KUBECONFIG: /tmp/kubeconfig

    - name: Create OpenShift secret for GHCR
      run: |
        oc project ${{ env.OPENSHIFT_NAMESPACE }}
        oc create secret docker-registry ghcr-pull-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ secrets.DOCKERHUB_USERNAME }} \
          --docker-password=${{ secrets.DOCKERHUB_PASSWORD }} \
          --docker-email=unused@example.com || true
        oc secrets link default ghcr-pull-secret --for=pull
      env:
        KUBECONFIG: /tmp/kubeconfig

    # Import image from GHCR to OpenShift
    - name: Import Docker image into OpenShift
      run: |
        oc project ${{ env.OPENSHIFT_NAMESPACE }}
        oc import-image ${{ env.APP_NAME }} --from=ghcr.io/${{ env.REPO_OWNER }}/${{ github.event.repository.name }}:latest --confirm
      env:
        KUBECONFIG: /tmp/kubeconfig
    
   # Update or create OpenShift deployment
    - name: Deploy application in OpenShift
      env:
        KUBECONFIG: /tmp/kubeconfig
      run: |
       oc apply -f - <<EOF
       apiVersion: apps.openshift.io/v1
       kind: DeploymentConfig
       metadata:
         name: ${{ env.APP_NAME }}
       spec:
         replicas: 1
         selector:
           app: ${{ env.APP_NAME }}
         template:
           metadata:
             labels:
               app: ${{ env.APP_NAME }}
           spec:
             containers:
             - name: ${{ env.APP_NAME }}
               image: ${{ env.APP_NAME }}:latest
               ports:
               - containerPort: ${{ env.APP_PORT }}
         strategy:
           type: Recreate
       EOF

