name: Openshift Mock api CI/CD
# https://github.com/redhat-actions/starter-workflows/blob/main/deployments/openshift.yml

permissions:
  contents: read
  packages: write
  id-token: write

env:
  OPENSHIFT_SERVER: ${{ secrets.OPENSHIFT_SERVER }}
  OPENSHIFT_TOKEN: ${{ secrets.OPENSHIFT_TOKEN }}
  OPENSHIFT_NAMESPACE: "golf-dev"
  OPENSHIFT_IMAGE_TAGS: ""
  OPENSHIFT_APP_PORT: ""

  IMAGE_PATH: ghcr.io/inholland-hydroguard/mock-api:latest
  APP_NAME: mock-api
  APP_PORT: 8080
  IMAGE_STREAM: ${{ secrets.OPENSHIFT_NAMESPACE }}/mock-api-${{ github.run_id }}

  IMAGE: ""

  IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
  IMAGE_REGISTRY_USER: ${{ github.actor }}
  IMAGE_REGISTRY_PASSWORD: ${{ github.token }}

on:
  push:
    branches: ["main"]

jobs:
  build-and-push:
    name: Build and Push Image
    runs-on: ubuntu-latest

    outputs:
      ROUTE: ${{ steps.deploy-and-expose.outputs.route }}
      SELECTOR: ${{ steps.deploy-and-expose.outputs.selector }}

    steps:
      - name: Check for required secrets
        uses: actions/github-script@v4
        with:
          script: |
            const secrets = {
              OPENSHIFT_SERVER: `${{ secrets.OPENSHIFT_SERVER }}`,
              OPENSHIFT_TOKEN: `${{ secrets.OPENSHIFT_TOKEN }}`,
            };
            const GHCR = "ghcr.io";
            if (`${{ env.IMAGE_REGISTRY }}`.startsWith(GHCR)) {
              core.info(`Image registry is ${GHCR} - no registry password required`);
            }
            else {
              core.info("A registry password is required");
              secrets["IMAGE_REGISTRY_PASSWORD"] = `${{ secrets.IMAGE_REGISTRY_PASSWORD }}`;
            }
            const missingSecrets = Object.entries(secrets).filter(([ name, value ]) => {
              if (value.length === 0) {
                core.error(`Secret "${name}" is not set`);
                return true;
              }
              core.info(`✔️ Secret "${name}" is set`);
              return false;
            });
            if (missingSecrets.length > 0) {
              core.setFailed(`❌ At least one required secret is not set in the repository. \n` +
                "You can add it using:\n" +
                "GitHub UI: https://docs.github.com/en/actions/reference/encrypted-secrets#creating-encrypted-secrets-for-a-repository \n" +
                "GitHub CLI: https://cli.github.com/manual/gh_secret_set \n" +
                "Also, refer to https://github.com/redhat-actions/oc-login#getting-started-with-the-action-or-see-example");
            }
            else {
              core.info(`✅ All the required secrets are set`);
            }
            // Ensure the IMAGE_REGISTRY is lowercase
            const imageRegistry = `${{ env.IMAGE_REGISTRY }}`.toLowerCase();
            core.exportVariable('IMAGE_REGISTRY', imageRegistry);
      - name: Check out repository
        uses: actions/checkout@v2

      - name: Determine app name
        if: env.OPENSHIFT_APP_NAME == ''
        run: |
          echo "OPENSHIFT_APP_NAME=$(basename $PWD)" | tee -a $GITHUB_ENV
      - name: Determine image tags
        if: env.OPENSHIFT_IMAGE_TAGS == ''
        run: |
          echo "OPENSHIFT_IMAGE_TAGS=latest ${GITHUB_SHA::12}" | tee -a $GITHUB_ENV
      # https://github.com/redhat-actions/buildah-build#readme
      - name: Build from Dockerfile
        id: build-image
        uses: redhat-actions/buildah-build@v2
        with:
          image: ${{ env.OPENSHIFT_APP_NAME }}
          tags: ${{ env.OPENSHIFT_IMAGE_TAGS }}
          dockerfiles: |
            ./Dockerfile

      # https://github.com/redhat-actions/push-to-registry#readme
      - name: Push to registry
        id: push-image
        uses: redhat-actions/push-to-registry@v2
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: docker://${{ env.IMAGE_REGISTRY }}
          username: ${{ env.IMAGE_REGISTRY_USER }}
          password: ${{ env.IMAGE_REGISTRY_PASSWORD }}


  openshift-deploy:
    name: Deploy to OpenShift
    runs-on: ubuntu-22.04
    needs: build-and-push

    steps:
      - name: Checkout action
        uses: actions/checkout@v4

      # Use the commit short-sha as the suffix of the app_name
      - name: Get commit short-sha
        id: commit-data
        uses: redhat-actions/common/commit-data@v1

      # https://github.com/redhat-actions/openshift-tools-installer.
      - name: OpenShift login
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          insecure_skip_tls_verify: true
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}


      # This step will create a deployment, service, and route to run your app and expose it to the internet.
      - name: Create and expose app
        id: oc-new-app
        uses: redhat-actions/oc-new-app@v1
        with:
          app_name: ${{ env.APP_NAME }}-${{ steps.commit-data.outputs.short_sha }}
          image: ${{ env.IMAGE_PATH }}
          namespace: ${{ secrets.OPENSHIFT_NAMESPACE }}
          build_env: |
            MY_ENV=MY_VALUE
          port: ${{ env.APP_PORT }}
          # create_pull_secret_from: podman
          # registry: quay.io
          # registry_username: ${{ env.REGISTRY_USERNAME }}
          # registry_password: ${{ secrets.REGISTRY_PASSWORD }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.oc-new-app.outputs) }}"

      # Perform a (very) basic integration test.
      # This step is retried since the time to pull the image and start the pod can vary.
      - name: Test project is running
        id: test-project
        uses: nick-invision/retry@v2.2.0
        with:
          timeout_seconds: 3
          retry_wait_seconds: 10
          max_attempts: 30
          warning_on_retry: false
          # Just check that the root endpoint returns a success status (-f flag).
          command: curl -sSfLi ${{ steps.oc-new-app.outputs.route }}

      - name: Tear down
        if: always()
        run: |
          oc delete all,secret --selector=${{ steps.oc-new-app.outputs.selector }} -n ${{ secrets.OPENSHIFT_NAMESPACE }}